# Tipos em Variáveis

// Quando as variáveis são declaradas, o TypeScript tenta inferir o tipo da variável. Não sendo nescessário tipar a variável.
const student = "Josan"; // string
const age = 27; // number
const isDeveloper = true; // boolean

// Porém quando o tipo não for inferido, é necessário tipar a variável.
let email: string;
email = "josan@email.com";

# Tipos em Funções
// Na função `init` como o parametro não foi tipado, o TS aplica o error de explicit any, que siguinifica que esse parametro 
// pode ser qualquer coisa, e isso não é uma boa pratica.
function init (port) {
  console.log(port);
}

init(80);

// Nesse caso ficará assim, garantindo o tipo de valor correto, se for passado um tipo diferente o TS retorna um erro.
function init (port: number) {
  console.log(port);
}

init(80);

# Tipos em Classes
// Na declaração da classe os membros de classes deve ser tipados individualmente assim como as variáveis.
// Com essa tipagem o TS impede que algum valor sejá passado com o tipo errado, assim sendo mais uma 
// proteção para evitar erros em desenvolvimento.

class Person {
  name: string;
  age: number;

  constructor (name: string, age: number) {
    this.name = name;
    this.age = age;
  }
}

const person = new Person("John Connor", 30);
console.log(person);
